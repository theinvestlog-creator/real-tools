---
import fs from 'node:fs/promises';
import path from 'node:path';

type IndexItem = {
  slug: string;
  name?: string;
  type?: string;
  summary?: string;
  since?: string;
};

type SeriesPoint = { date: string; ratio?: number; a?: number; b?: number };
type SeriesJson = { kpis?: Record<string, number>; series: SeriesPoint[] };
type MetaJson = {
  slug: string;
  title: string;
  tickers?: string[];
  formula?: string;
  notes?: string;
};

// Non-generic JSON reader to avoid Astro parsing generics as JSX
async function readJson(p: string): Promise<any> {
  const raw = await fs.readFile(p, 'utf-8');
  return JSON.parse(raw);
}

export async function getStaticPaths() {
  const root = process.cwd();
  const idxPath = path.join(root, 'public', 'data', 'indicators', 'index.json');

  let items: IndexItem[] = [];
  try {
    const idx = (await readJson(idxPath)) as { items?: IndexItem[] };
    items = Array.isArray(idx?.items) ? idx.items : [];
  } catch {
    items = [];
  }

  const pages: Array<{
    params: { slug: string };
    props: { meta: MetaJson; daily: SeriesJson | null; me: SeriesJson | null };
  }> = [];

  for (const it of items) {
    const base = path.join(root, 'public', 'data', 'indicators', it.slug);

    const meta = (await readJson(path.join(base, 'meta.json')).catch(() => null)) as MetaJson | null;
    const daily = (await readJson(path.join(base, 'series.json')).catch(() => null)) as SeriesJson | null;
    const me = (await readJson(path.join(base, 'series_me.json')).catch(() => null)) as SeriesJson | null;

    const hasDaily = !!(daily && Array.isArray(daily.series) && daily.series.length);
    const hasME = !!(me && Array.isArray(me.series) && me.series.length);

    if (!meta || !(hasDaily || hasME)) {
      continue;
    }

    pages.push({
      params: { slug: it.slug },
      props: { meta, daily, me },
    });
  }

  return pages;
}

// Props provided by getStaticPaths
const { meta, daily, me } = Astro.props as {
  meta: MetaJson;
  daily: SeriesJson | null;
  me: SeriesJson | null;
};

const pageTitle: string = meta?.title ?? 'Indicator';

// Choose default series: ME (month-end) if present; else daily
const chosen = (me && me.series?.length ? me : daily) as SeriesJson | null;

// Precompute safe display values for template (no complex expressions in HTML)
const kpis = (me?.kpis ?? daily?.kpis) ?? {};
const obsVal = (kpis as any).obs ?? (chosen?.series?.length ?? 0);
const cagrVal = typeof (kpis as any).cagr_all === 'number' ? ((kpis as any).cagr_all as number) : null;
const maxddVal = typeof (kpis as any).maxdd_all === 'number' ? ((kpis as any).maxdd_all as number) : null;

const cagrText = cagrVal !== null ? `${(cagrVal * 100).toFixed(2)}%` : '';
const maxddText = maxddVal !== null ? `${(maxddVal * 100).toFixed(1)}%` : '';

const hasSeries = !!(chosen && Array.isArray(chosen.series) && chosen.series.length);
---

<!-- AdminLTE page header + breadcrumbs (layout wraps this) -->
<section class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1>{pageTitle}</h1>
      </div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item"><a href="/indicators/">Indicators</a></li>
          <li class="breadcrumb-item active">{meta?.slug}</li>
        </ol>
      </div>
    </div>
  </div>
</section>

<section class="content">
  <div class="container-fluid">
    <div class="card">
      <div class="card-body">
        {meta?.notes && <p class="mb-3">{meta.notes}</p>}

        {!hasSeries && (
          <div class="alert alert-warning mb-0">
            No series data available at build time for <strong>{meta?.slug}</strong>.
          </div>
        )}

        {hasSeries && (
          <div>
            {meta?.formula && (
              <p class="text-muted"><em>Formula:</em> {meta.formula}</p>
            )}
            {meta?.tickers?.length && (
              <p class="text-muted mb-3"><em>Tickers:</em> {meta.tickers.join(', ')}</p>
            )}

            <p class="mb-0">
              Observations: <strong>{obsVal}</strong>
              {cagrText && <span> · CAGR: <strong>{cagrText}</strong></span>}
              {maxddText && <span> · Max DD: <strong>{maxddText}</strong></span>}
            </p>

            <div id="chart-container" class="mt-3">
              <!-- Progressive enhancement placeholder; client JS can hydrate using embedded props -->
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</section>

