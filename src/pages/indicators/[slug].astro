import fs from 'node:fs/promises';
import path from 'node:path';

// Build-time helper
async function readJson(p: string): Promise<any> {
  const raw = await fs.readFile(p, 'utf-8');
  return JSON.parse(raw);
}

type IndexItem = {
  slug: string;
  name?: string;
  type?: string;
  summary?: string;
  since?: string;
};

type SeriesPoint = { date: string; ratio?: number; a?: number; b?: number };
type SeriesJson = { kpis?: Record<string, number>; series: SeriesPoint[] };
type MetaJson = {
  slug: string;
  title: string;
  tickers?: string[];
  formula?: string;
  notes?: string;
};

// Enumerate dynamic paths from public/data at build time.
// If index.json is missing/empty, return [] to avoid breaking static build.
export async function getStaticPaths() {
  const root = process.cwd();
  const idxPath = path.join(root, 'public', 'data', 'indicators', 'index.json');

  let items: IndexItem[] = [];
  try {
    const idx = (await readJson(idxPath)) as { items: IndexItem[] };
    items = Array.isArray(idx?.items) ? idx.items : [];
  } catch {
    // No index → no pages. Keep build green.
    items = [];
  }

  // Preload per-slug JSON into props to avoid any client-side fetch.
  const entries = await Promise.all(
    items.map(async (it) => {
      const base = path.join(root, 'public', 'data', 'indicators', it.slug);
      const meta = (await readJson(path.join(base, 'meta.json')).catch(() => null)) as MetaJson | null;
      const daily = (await readJson(path.join(base, 'series.json')).catch(() => null)) as SeriesJson | null;
      const me = (await readJson(path.join(base, 'series_me.json')).catch(() => null)) as SeriesJson | null;

      // Only generate a page if meta and at least one series file exist.
      if (!meta || !(daily?.series?.length || me?.series?.length)) {
        return null;
      }
      return {
        params: { slug: it.slug },
        props: {
          meta,
          daily,
          me,
          // keep minimal extra props to reduce page weight
        },
      };
    })
  );

  return entries.filter(Boolean) as any[];
}

// Props supplied by getStaticPaths
const { meta, daily, me } = Astro.props as {
  meta: MetaJson;
  daily: SeriesJson | null;
  me: SeriesJson | null;
};

// Choose default series: ME (month-end) if present, else daily
const series = (me?.series?.length ? me : daily) ?? { series: [] };

const pageTitle = meta?.title ?? 'Indicator';
---

<!-- AdminLTE canonical layout is handled by the site layout; render only content -->
<section class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1>{pageTitle}</h1>
      </div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item"><a href="/indicators/">Indicators</a></li>
          <li class="breadcrumb-item active">{meta?.slug}</li>
        </ol>
      </div>
    </div>
  </div>
</section>

<section class="content">
  <div class="container-fluid">
    <div class="card">
      <div class="card-body">
        {meta?.notes && (<p class="mb-3">{meta.notes}</p>)}

        <!-- Minimal SSR data check -->
        {series.series.length === 0 ? (
          <div class="alert alert-warning mb-0">
            No series data available at build time for <strong>{meta?.slug}</strong>.
          </div>
        ) : (
          <Fragment>
            <!-- Server-render a tiny summary; charts (if any) can enhance on client -->
            {meta?.formula && (
              <p class="text-muted"><em>Formula:</em> {meta.formula}</p>
            )}
            {meta?.tickers?.length && (
              <p class="text-muted mb-3"><em>Tickers:</em> {meta.tickers.join(', ')}</p>
            )}

            <!-- Example static summary -->
            <p class="mb-0">
              Observations: <strong>{(me?.kpis?.obs ?? daily?.kpis?.obs) ?? series.series.length}</strong>
              {typeof (me?.kpis?.cagr_all ?? daily?.kpis?.cagr_all) === 'number' && (
                <span>
                  {' '}
                  · CAGR: <strong>{((me?.kpis?.cagr_all ?? daily?.kpis?.cagr_all) * 100).toFixed(2)}%</strong>
                </span>
              )}
              {typeof (me?.kpis?.maxdd_all ?? daily?.kpis?.maxdd_all) === 'number' && (
                <span>
                  {' '}
                  · Max DD: <strong>{(((me?.kpis?.maxdd_all ?? daily?.kpis?.maxdd_all)) * 100).toFixed(1)}%</strong>
                </span>
              )}
            </p>

            <!-- If you have a chart enhancer, mount it; SSR content remains useful without JS -->
            <div id="chart-container" class="mt-3">
              <!-- Progressive enhancement only; no data fetch needed because data is already embedded via props -->
            </div>
          </Fragment>
        )}
      </div>
    </div>
  </div>
</section>
